WEBVTT

00:00.330 --> 00:02.940
Not this section is about links.

00:02.970 --> 00:08.150
So in this video we will learn why we need linked list.

00:08.290 --> 00:11.500
So for covering the topic I'll be discussing about these two things.

00:11.640 --> 00:16.920
Problems that arise and the difference between right and link list.

00:17.060 --> 00:21.980
So first thing problem with Donati all day is often fixed size.

00:22.200 --> 00:27.240
Whenever you are creating an error you have to mention the size and later on you cannot increase or

00:27.240 --> 00:28.630
decrease the size of it.

00:29.100 --> 00:31.820
So once created it remains same.

00:31.920 --> 00:33.300
That is the problem.

00:33.480 --> 00:35.230
Why if X site is the problem.

00:35.380 --> 00:39.450
C unless we are sure that we are going to store some number of elements.

00:39.480 --> 00:45.400
If we know the size the number of elements then we can create an area of that particular size.

00:45.450 --> 00:51.270
If we don't know how many elements we are going to store during the runtime of a program then we cannot

00:51.270 --> 00:53.070
decide the size of fanatic.

00:53.640 --> 01:00.620
If we take some random size then that size may be either insufficient or it may be accessed.

01:00.690 --> 01:04.100
For example I'm not sure how many elements I'm going to store.

01:04.170 --> 01:13.700
So in the program if I declare an array of size 10 then in this array I cannot store more than 10 elements.

01:14.200 --> 01:17.380
Somewhat I have more than 10 elements during runtime.

01:17.700 --> 01:25.470
Then I cannot store them and if I'm just having 2 3 elements then lot of space in that they will be

01:25.470 --> 01:26.040
wasted.

01:27.600 --> 01:29.330
So I think a larger size.

01:29.460 --> 01:32.080
Hundred.

01:32.180 --> 01:35.080
Again I cannot store the elements more than a hundred.

01:36.000 --> 01:41.910
So during the time of a program I don't know how many elements will be required to see one thing I'll

01:41.910 --> 01:45.470
make it clear we are programmers.

01:45.480 --> 01:51.990
We write programs applications for whom for users people who use other programs.

01:52.740 --> 01:57.990
So people who use other programs will decide how many elements together they are going to enter into

01:58.000 --> 01:58.560
our program.

01:59.100 --> 02:03.300
So there what would be the list size or array size.

02:03.300 --> 02:03.940
We don't.

02:04.390 --> 02:10.270
So I try and time the list to size will be decided by but recording time or compile time.

02:10.290 --> 02:12.000
We have to give the size.

02:12.100 --> 02:12.920
This is the problem.

02:13.560 --> 02:19.810
So this is the problem with the idea that next let us see the difference between idea Linklater soil

02:19.810 --> 02:26.970
and discuss more about Daddy than welcome to linguist not liquor but also a little bit of revision.

02:26.970 --> 02:32.400
We already know that we can create an array either inside stack or we can create it inside heap.

02:32.760 --> 02:37.630
So for creating an inside stack we say integer a size some size.

02:37.650 --> 02:39.330
I'm thinking a small size here.

02:39.330 --> 02:43.800
So this will be created inside activation record of mean function.

02:44.140 --> 02:47.380
So idea of safe 5 that we created there.

02:48.150 --> 02:53.640
Then if you want to create an array in heap then we should take a pointer.

02:53.790 --> 02:56.930
So for point that I'll take the variable names B.

02:57.060 --> 03:00.070
Then we should say new whatever the size you want.

03:00.150 --> 03:03.010
So this size can be taken at runtime and mentioned here.

03:03.030 --> 03:06.560
That's the benefit but directly I'm writing here as an example.

03:06.870 --> 03:12.860
So pointer B will be available here and an array of the size of 5 will be created in sight.

03:12.900 --> 03:17.620
Heap this pointer pointing on that.

03:17.740 --> 03:25.300
So this is INSIDE stock and this is inside keep on the benefit of an array is that all these locations

03:25.300 --> 03:27.130
will be contiguous.

03:27.130 --> 03:32.890
There will be side by side so you can access them with index that this zero element first elements again.

03:32.890 --> 03:41.650
Third and fourth element so randomly you can reach on any element so array imagine just like a bench.

03:42.130 --> 03:46.800
There is a bench of capacity 5 5 people can sit on that bench.

03:46.990 --> 03:52.640
So when you're making a bench at that time will decide what size you want then that capacity is fixed.

03:52.810 --> 03:54.970
Not only those many people can sit on that bench.

03:55.300 --> 03:59.440
If more people there's more space it's less people then space is wasted.

04:00.070 --> 04:01.270
So this is like a bench

04:04.770 --> 04:07.440
not coming in the linked list.

04:07.450 --> 04:08.850
Here we what do we want this.

04:08.850 --> 04:15.480
We don't want a fixed sized bench like this because we don't know the size who is using the wood program

04:15.480 --> 04:18.060
and what does is required and how many elements he is having.

04:18.060 --> 04:18.810
We don't know.

04:19.020 --> 04:22.650
Let him go on giving the elements as many elements as you want.

04:22.740 --> 04:28.470
So the let the user give as many elements as you want then they cannot go for a.

04:29.100 --> 04:29.980
And one more thing.

04:30.060 --> 04:33.320
Let the user add more elements and also remove the element.

04:33.330 --> 04:38.710
So we want some data structure which should grow and deals in size.

04:38.730 --> 04:41.490
So we want a variable size structure.

04:42.600 --> 04:46.260
So for that I'll just share the idea about linked list.

04:46.290 --> 04:55.510
So for that we must create memory in the heap during runtime and we should use the linking for making

04:55.510 --> 04:57.610
it as a link list.

04:58.110 --> 04:59.580
So how legacy.

04:59.610 --> 05:01.410
I'm just sharing the idea here.

05:02.480 --> 05:05.530
See for allocating memory inside heaved up inside.

05:05.610 --> 05:11.470
We have taken a pointer and the one pointer I have a look at that five spaces with the one point that

05:11.540 --> 05:13.280
I have a look at that face business.

05:13.490 --> 05:22.430
Again I made it like a bench but now I will take one pointer let me call it does it first.

05:22.430 --> 05:24.650
I'll just keep a pointer with me.

05:24.650 --> 05:30.050
Now watch this carefully I'm sharing the idea of linguists not showing what is linguist just reading

05:30.050 --> 05:30.770
an idea.

05:31.040 --> 05:39.200
I have a pointer I want to store one element just one element then for this I look at the space on this

05:39.200 --> 05:41.810
point the flows will be pointing on this one.

05:41.960 --> 05:45.750
So that is for storing just one element that is the eight is the element.

05:47.460 --> 05:50.240
So at this point the biggest point only on one element.

05:50.240 --> 05:51.290
What about next.

05:51.290 --> 05:52.300
If I want more.

05:52.460 --> 05:58.800
So along with this element we would also look at the space for a pointer to the next element.

05:58.820 --> 06:01.240
If there is any next element of loop pointing on that one.

06:02.030 --> 06:06.430
So right now there is nothing so let it be known so that's it.

06:06.440 --> 06:08.610
We made a Nord so fast.

06:08.620 --> 06:11.420
Pointer was there when we have a look at it.

06:11.420 --> 06:13.220
The memory for just one element.

06:13.220 --> 06:18.910
And we have a look at it in memory for element as the less pointed to the next one.

06:18.950 --> 06:23.210
Now we have one more point that any if we want one more element.

06:23.300 --> 06:26.530
Then again I look at the memory like this.

06:26.570 --> 06:28.270
Here you store the element.

06:28.430 --> 06:33.050
Then this will be pointing on this one like this pointer was pointing on this or this point of view

06:33.050 --> 06:36.280
pointing on this moon so we can call that block as a node.

06:36.290 --> 06:40.730
No the next I have one more element to it.

06:41.060 --> 06:45.740
So again create a more notable content value tool and the pointer to next.

06:45.770 --> 06:51.530
And this point it will be pointing on this one so there is no node beyond this one for let it be known.

06:53.100 --> 07:02.260
So I'm creating and more than ever I want to store an element so it is just like it is not a bench.

07:02.450 --> 07:06.930
Imagine that we have free space whoever want to come and sit.

07:06.950 --> 07:08.100
He should bring his chair.

07:08.780 --> 07:14.120
No the next person come the first person will link to that person then that will link to next person.

07:14.120 --> 07:22.010
So in this field forming a chain or a lings of chairs and if anybody's leaving he can take of a chair

07:22.010 --> 07:22.770
with him.

07:22.940 --> 07:25.850
So whoever is coming in will bring a chair.

07:25.910 --> 07:31.250
So every element will bring its own memory and point to the next element.

07:31.640 --> 07:37.520
So together elements space and the point and space together recall it as normal.

07:37.850 --> 07:41.170
So this is how Reforma linked lists insight.

07:41.230 --> 07:43.290
He.

07:43.900 --> 07:46.730
So now you can see that it's suppose you want to remove tree.

07:46.740 --> 07:51.170
You can easily remove tree this eight instead of pointing one tree.

07:51.220 --> 07:53.070
This will be pointing on to.

07:53.860 --> 07:59.160
That's easy and you can remove this one I'll bring it back as it is.

07:59.500 --> 08:03.010
Now suppose you want to bring some new element in between 3 and do it.

08:03.040 --> 08:04.750
Then you can simply create a..

08:04.750 --> 08:10.550
Legacy element 7 7 will be pointing on dual and 3 will be pointing on 7.

08:10.550 --> 08:12.750
Now if you start from here you'll go on 8.

08:12.760 --> 08:16.890
And for me you can go on 3 from 3 you can go on 7 7 you can go do it.

08:17.500 --> 08:24.830
So it's easy to insert something in between also by just changing links.

08:24.830 --> 08:32.690
So this is data structure is more flexible than Ari and the size can grow and size can really and you

08:32.690 --> 08:41.760
can easily insert the new elements or remove the existing elements from the linguists so that's it.

08:41.760 --> 08:45.840
I have given the introduction what does it mean by linguists what does it mean Mandarin.

08:45.870 --> 08:51.150
So remember this points once again that that is great inside star that is created inside heap using

08:51.150 --> 08:53.790
a pointer and the linguists.

08:53.830 --> 08:56.580
There is no meaning of creating a linguist inside stack.

08:56.580 --> 09:02.270
We create linguists always inside keep so dynamically we look at the memory for each element memory

09:02.280 --> 09:03.430
separately look at it.

09:03.600 --> 09:05.450
If element is removed the memories are gone.

09:06.660 --> 09:08.090
So the sizes variable.

09:09.620 --> 09:13.320
So in the next video we will have the details of a limitless.

09:13.320 --> 09:16.180
This will just I was shading the idea about linguist.
